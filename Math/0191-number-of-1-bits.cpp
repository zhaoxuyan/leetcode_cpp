/*
 * 191. 位1的个数
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），
 * 返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 *
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011中，共有三位为 '1'。
 *
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000中，共有一位为 '1'。
 *
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *
 * 常见的位操作：
 * 1. 大写转小写
 * ('a' | ' ') = 'a'
 * ('A' | ' ') = 'a'
 *
 * 2. 小写转大写
 * ('b' & '_') = 'B'
 * ('B' & '_') = 'B'
 *
 * 3. 大小写互相转换
 * ('d' ^ ' ') = 'D'
 * ('D' ^ ' ') = 'd'
 *
 * 4. 判断两个数是否异号
 * int x = -1, y = 2;
 * bool f = ((x ^ y) < 0); // true
 *
 * 5. 不用临时变量交换两个数
 * int a = 1, b = 2;
 * a ^= b;
 * b ^= a;
 * a ^= b;
 * 现在 a = 2, b = 1
 *
 * int x = 3, y = 2;
 * bool f = ((x ^ y) < 0); // false
 *
 * 位操作：n&(n-1) 这个操作是算法中常见的，作用是消除数字 n 的二进制表示中的最后一个 1。
 */
#include <algorithm>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int res = 0; // 定义一个int一定要初始化 !!!
        while (n != 0) {
            n = n & (n - 1);
            res++;
        }
        return res;
    }
};